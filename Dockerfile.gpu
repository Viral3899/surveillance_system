# GPU-enabled Dockerfile for AI Surveillance System
FROM nvidia/cuda:11.8.0-devel-ubuntu20.04 as base

# Environment variables
ENV PYTHONUNBUFFERED=1 \
    DEBIAN_FRONTEND=noninteractive \
    OPENCV_LOG_LEVEL=ERROR \
    CUDA_VISIBLE_DEVICES=0

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3.9 python3.9-dev python3-pip \
    libopencv-dev python3-opencv \
    build-essential cmake \
    libopenblas-dev liblapack-dev libx11-dev libgtk-3-dev \
    libboost-all-dev \
    v4l-utils ffmpeg \
    libcudnn8 libcudnn8-dev \
    wget curl unzip bzip2 \
    libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1 \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Make python alias
RUN ln -s /usr/bin/python3.9 /usr/bin/python

# Set working directory
WORKDIR /app

# Copy and install Python dependencies first (cache-friendly)
COPY requirements.txt .
RUN pip3 install --no-cache-dir --upgrade pip && \
    pip3 install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118 && \
    pip3 install --no-cache-dir -r requirements.txt

# Install dlib with CUDA support
RUN pip3 install --no-cache-dir dlib

# Download dlib face landmarks model
RUN mkdir -p /app/models && \
    wget -O /tmp/shape_predictor_68_face_landmarks.dat.bz2 \
        http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2 && \
    bunzip2 /tmp/shape_predictor_68_face_landmarks.dat.bz2 && \
    mv /tmp/shape_predictor_68_face_landmarks.dat /app/models/

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p face_gallery surveillance_output/clips surveillance_output/images surveillance_output/logs

# Run setup script before non-root switch
RUN python setup.py

# Create app user & adjust permissions
RUN useradd -m -u 1000 appuser && \
    chown -R appuser:appuser /app face_gallery surveillance_output

# Switch to non-root
USER appuser

# Expose ports
EXPOSE 8501 8080

# Health check (verifies GPU availability)
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD python -c "import torch; print('CUDA available:', torch.cuda.is_available())" || exit 1

# Default command
CMD ["python", "main.py", "--headless"]
    