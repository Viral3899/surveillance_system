version: "3.9"

services:
  surveillance-gpu:
    build:
      context: .
      dockerfile: Dockerfile.gpu
    container_name: ai_surveillance_gpu
    restart: unless-stopped
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility,video
      - GPU_ENABLED=true
      - CUDA_VISIBLE_DEVICES=0
      - CAMERA_ID=0
      - LOG_LEVEL=INFO
      - FACE_GALLERY_PATH=/app/face_gallery
      - OUTPUT_DIR=/app/surveillance_output
      - POSTGRES_HOST=postgres-gpu
      - POSTGRES_USER=surveillance_user
      - POSTGRES_PASSWORD=secure_password_change_me
      - POSTGRES_DB=surveillance
      - REDIS_HOST=redis-gpu
      - REDIS_PORT=6379
      - GPU_MEMORY_FRACTION=0.7
      - PYTHONPATH=/app
    devices:
      - /dev/video0:/dev/video0
    volumes:
      - ./face_gallery:/app/face_gallery:rw
      - ./surveillance_data:/app/surveillance_output:rw
      - ./config:/app/config:ro
      - ./models:/app/models:rw
      - gpu_model_cache:/root/.cache
    ports:
      - "8081:8080"
      - "8511:8501"
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: >
        python -c "import torch,sys;
        assert torch.cuda.is_available(), 'CUDA not available';
        assert torch.cuda.device_count()>0, 'No CUDA devices';
        print('GPU Health OK:', torch.cuda.get_device_name(0));
        sys.exit(0)"
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 180s
    depends_on:
      postgres-gpu:
        condition: service_healthy
      redis-gpu:
        condition: service_started
    networks:
      - surveillance_gpu_network

  postgres-gpu:
    image: postgres:15-alpine
    container_name: surveillance_db_gpu
    restart: unless-stopped
    environment:
      POSTGRES_DB: surveillance
      POSTGRES_USER: surveillance_user
      POSTGRES_PASSWORD: secure_password_change_me
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_gpu_data:/var/lib/postgresql/data
      - ./db_init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U surveillance_user -d surveillance"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    networks:
      - surveillance_gpu_network

  redis-gpu:
    image: redis:7-alpine
    container_name: surveillance_redis_gpu
    restart: unless-stopped
    command: >
      redis-server --appendonly yes --maxmemory 512mb
      --maxmemory-policy allkeys-lru --save 900 1
      --save 300 10 --save 60 10000
    volumes:
      - redis_gpu_data:/data
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    networks:
      - surveillance_gpu_network

  web-interface-gpu:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: surveillance_web_gpu
    restart: unless-stopped
    environment:
      - SURVEILLANCE_API_URL=http://surveillance-gpu:8080
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
    volumes:
      - ./surveillance_data:/app/surveillance_output:ro
      - ./face_gallery:/app/face_gallery:ro
    ports:
      - "8512:8501"
    depends_on:
      - surveillance-gpu
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
    networks:
      - surveillance_gpu_network

  nvidia-monitor:
    image: nvidia/cuda:11.8-base-ubuntu20.04
    container_name: surveillance_nvidia_monitor
    restart: unless-stopped
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    command: >
      bash -c "while true; do
        echo '=== GPU Status at $(date) ===';
        nvidia-smi --query-gpu=timestamp,name,driver_version,temperature.gpu,utilization.gpu,memory.total,memory.free,memory.used --format=csv;
        sleep 60;
      done"
    volumes:
      - ./surveillance_data/logs:/var/log:rw
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    networks:
      - surveillance_gpu_network

  nginx-gpu:
    image: nginx:alpine
    container_name: surveillance_nginx_gpu
    restart: unless-stopped
    ports:
      - "8090:80"
      - "8443:443"
    volumes:
      - ./nginx-gpu.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./surveillance_data:/var/www/surveillance:ro
    depends_on:
      - surveillance-gpu
      - web-interface-gpu
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - surveillance_gpu_network

  health-monitor:
    image: alpine:latest
    container_name: surveillance_health_gpu
    restart: unless-stopped
    command: >
      sh -c "apk add --no-cache curl jq;
      while true; do
        echo '=== System Health $(date) ===';
        curl -sf http://surveillance-gpu:8080/health >/dev/null && echo 'API: Healthy' || echo 'API: Unhealthy';
        curl -sf http://web-interface-gpu:8501/_stcore/health >/dev/null && echo 'Web: Healthy' || echo 'Web: Unhealthy';
        nc -z postgres-gpu 5432 && echo 'Database: Connected' || echo 'Database: Disconnected';
        nc -z redis-gpu 6379 && echo 'Redis: Connected' || echo 'Redis: Disconnected';
        sleep 300;
      done"
    volumes:
      - ./surveillance_data/logs:/var/log:rw
    depends_on:
      - surveillance-gpu
      - postgres-gpu
      - redis-gpu
      - web-interface-gpu
    networks:
      - surveillance_gpu_network

volumes:
  postgres_gpu_data:
  redis_gpu_data:
  gpu_model_cache:

networks:
  surveillance_gpu_network:
    driver: bridge
